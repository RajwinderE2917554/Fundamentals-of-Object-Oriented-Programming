/*TASK 1 SOLUTION:
1. Multiple Inheritance
2. Protected Access Specifier
3. Resolving Ambiguity for the getData function using the scope resolution operator
4. Using functionn overloading to perform run time polymorphism 
i.e. the function getData is overloaded in all the classes



NAME: Vansh Singla
CLASS: BCA-2C2
ROLL NO: 2310997315


*/

#include <iostream>
using namespace std;
class rectangle{
protected:
    int length;
    int breadth;

public:
    void getData(int len, int bre)
    {
        length = len;
        breadth = bre;
    }
};

class circle{
protected:
    int radius;

public:
    void getData(int rad)
    {
        radius = rad;
    }
};

class triangle{
protected:
    float height;
    float base;

public:
    void getData(float h, float b)
    {
        height = h;
        base = b;
    }
};

class square{
protected:
    float side;

public:
    void getData(float s)
    {
        side = s;
    }
};

class shape : public rectangle, public circle, public triangle, public square //  used multiple inheritance 
{
public:
    shape()
    {
        rectangle::getData(10, 20);
        circle::getData(5);
        triangle::getData(10.5, 20.5);
        square::getData(10);
    }
    
    void display()
    {
        cout << "Area of rectangle: " << length * breadth << endl;
        cout << "Area of circle: " << 3.14 * radius * radius << endl;
        cout << "Area of triangle: " << 0.5 * height * base << endl;
        cout << "Area of square: " << side * side << endl;
    }
};

int main()
{
    shape obj;
    obj.display();
    // obj.getData(10, 20);
    // obj.getData(5);
    // obj.getData(10.5, 20.5);
    // obj.getData(10);
    return 0;
}

/*Task-2:

An operator overloading allows custom behavior to be defined for built-in operators like addition (+),
subtraction (-), when we used with user-defined types.
When overloading binary operators as friend functions, external functions can access private members of a class.
Provide examples how binary operator overloading is implemented using friend functions. 


/*
TASK 2 SOLUTION:
In this code I have used three main concepts of operator overloading:
1. Binary operator overloading using Friend Function 
2. Usind constructors to initialize the values of the objects
3. Using this operator to point to the current object


NAME: Vansh Singla
CLASS: BCA-2C2
ROLL NO: 2310997315


*/
#include<iostream>
using namespace std;
class complex{
    int real;
    int img;
    public:
    complex(int real, int img){
        this->real = real;
        this->img = img;
    }

     friend complex operator+( complex c1,  complex c2);
     void display(){
        cout<<real<<" + "<<img<<"i"<<endl;
     }

};
complex operator+( complex  c1, complex c2){
    return complex(c1.real+c2.real, c1.img+c2.img);
}

int main(){
    complex c1(101,25);
    complex c2(156,27);
    complex result = c1+c2;
    result.display();
    return 0;
}
