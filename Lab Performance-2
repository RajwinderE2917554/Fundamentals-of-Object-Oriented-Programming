Task-1:

Suppose you are working on a geometry library that deals with different types of geometric shapes, including circles, rectangles, and triangles. 
Each shape has common properties like area and perimeter, but also specific attributes such as radius for circles, length and width for rectangles, and side lengths for triangles.

•	Develop a class hierarchy for geometric shapes using inheritance in C++.
•	Explain how you would utilize inheritance and polymorphism to implement algorithms for calculating area and perimeter that are specific to each type of shape


Task-2:

An operator overloading allows custom behavior to be defined for built-in operators like addition (+), subtraction (-), when we used with user-defined types.
When overloading binary operators as friend functions, external functions can access private members of a class.
Provide examples how binary operator overloading is implemented using friend functions. 
Task 1:- 
#include<iostream>
using namespace std;
class Shape{
	public:
		void area(){
			
		}
		void perimeter(){
			
		}
};
class Circle:public Shape{
	double r,area_value,perimeter_value;
	public:
		Circle(){
			cout<<"Enter value of radius of circle: ";
			cin>>r;
			area();
			perimeter();
		}
		void area(){
			area_value=3.14*r*r;
		}
		void perimeter(){
			perimeter_value=2*3.14*r;
		}
		void display(){
			cout<<"Area of circle:"<<area_value<<endl;
			cout<<"Perimeter of circle:"<<perimeter_value<<endl;
		}
};
class Rectangle:public Shape{
	double len,bre,area_value,perimeter_value;
	public:
		Rectangle(){
			cout<<"Enter length of rectangle:";
			cin>>len;
			cout<<"Enter breadth of rectangle:";
			cin>>bre;
			area();
			perimeter();
		}
		void area(){
			area_value=len*bre;
		}
		void perimeter(){
			perimeter_value=2*(len+bre);
		}
		void display(){
			cout<<"Area of rectangle:"<<area_value<<endl;
			cout<<"Perimeter of rectangle:"<<perimeter_value<<endl;
		}
};
class Triangle:public Shape{
	double side1,side2,side3,hei,area_value,perimeter_value;
	public:
		Triangle(){
			cout<<"Enter height of triangle:";
			cin>>hei;
			cout<<"Enter base or side1 of triangle:";
			cin>>side1;
			cout<<"Enter side2 of triangle:";
			cin>>side2;
			cout<<"Enter side3 of triangle:";
			cin>>side3;
			area();
			perimeter();
		}
		void area(){
			area_value=0.5*hei*side1;
		}
		void perimeter(){
			perimeter_value=side1+side2+side3;
		}
		void display(){
			cout<<"Area of triangle:"<<area_value<<endl;
			cout<<"Perimeter of triangle:"<<perimeter_value<<endl;
		}
};
int main(){
	cout<<"Name:- Jatin Watts"<<endl;
	cout<<"Roll No:- 2310997130"<<endl;
	Circle circle;
	circle.display();
	cout<<endl;
	Rectangle rectangle;
	rectangle.display();
	cout<<endl;
	Triangle triangle;
	triangle.display();
	cout<<endl;
	return 0;
}
Task 2:- 
#include <iostream>
using namespace std;
class Overloading{
    int j,w;
    public:
        void get(){
            cout<<"Enter value of j: ";
            cin>>j;
            cout<<"Enter value of w: ";
            cin>>w;
        }
        friend Overloading operator+(Overloading &obj, Overloading &obj1);
        friend Overloading operator-(Overloading &obj, Overloading &obj1);
        void display0(){
        	cout<<"Addition of J:"<<j<<endl;
        	cout<<"Addition of W:"<<w<<endl;
		}
		void display1(){
        	cout<<"Subtraction of J:"<<j<<endl;
        	cout<<"Subtraction of W:"<<w<<endl;
		}
};
 Overloading operator+(Overloading &obj, Overloading &obj1){
    Overloading sum;
    sum.j=obj.j+obj1.j;
    sum.w=obj.w+obj1.w;
    return sum;
}
Overloading operator-(Overloading &obj, Overloading &obj1){
    Overloading sub;
    sub.j=obj.j-obj1.w;
    sub.w=obj.w-obj1.w;
    return sub;
}
int main() {
		cout<<"Name:- Jatin Watts"<<endl;
	cout<<"Roll No:- 2310997130"<<endl;
    Overloading obj,obj1,sum,sub;
    cout<<"Enter values in first object:- "<<endl;
    obj.get();
    cout<<"Enter values in second object:- "<<endl;
    obj1.get();
    sum=obj+obj1;
    sub=obj-obj1;
    sum.display0();
    sub.display1();
    return 0;
}
